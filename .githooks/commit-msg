#!/bin/sh
# Git hook to validate conventional commit format
# This script prevents commits that don't follow conventional commit standards

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the commit message
commit_regex='^(feat|fix|docs|style|refactor|perf|test|chore|build|ci|revert)(\(.+\))?: .{1,50}'

# Read the commit message from the file
commit_message=$(cat "$1")

# Check if commit message matches conventional commit format
if echo "$commit_message" | grep -qE "$commit_regex"; then
    echo "${GREEN}✓ Commit message follows conventional commit format${NC}"
    exit 0
else
    echo "${RED}✗ Commit message does not follow conventional commit format${NC}"
    echo ""
    echo "${YELLOW}Expected format:${NC}"
    echo "  <type>(<scope>): <description>"
    echo ""
    echo "${YELLOW}Valid types:${NC}"
    echo "  feat:     A new feature"
    echo "  fix:      A bug fix"
    echo "  docs:     Documentation only changes"
    echo "  style:    Changes that do not affect the meaning of the code"
    echo "  refactor: A code change that neither fixes a bug nor adds a feature"
    echo "  perf:     A code change that improves performance"
    echo "  test:     Adding missing tests or correcting existing tests"
    echo "  chore:    Changes to the build process or auxiliary tools"
    echo "  build:    Changes that affect the build system or external dependencies"
    echo "  ci:       Changes to our CI configuration files and scripts"
    echo "  revert:   Reverts a previous commit"
    echo ""
    echo "${YELLOW}Examples:${NC}"
    echo "  feat(auth): add user authentication system"
    echo "  fix(ui): resolve button alignment issue"
    echo "  docs: update installation guide"
    echo "  refactor(api): simplify user service logic"
    echo ""
    echo "${YELLOW}Your commit message:${NC}"
    echo "  $commit_message"
    echo ""
    echo "${RED}Please fix your commit message and try again.${NC}"
    exit 1
fi
